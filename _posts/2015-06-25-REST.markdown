---
layout: post
title: "REST"
date: 2015-06-25 14:40
categories: "WEB"
---

###表征性状态传输

> Roy Fielding博士在2000年他的博士论文中提出来的一种**软件架构风格**。   
(*REST是设计风格不是标准。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准*)

###主流的Web服务实现方案
- SOAP
- XML-RPC
- REST

###REST 要点
- 客户端和服务器结构
- 连接协议具有无状态性
- 能够利用Cache机制增进性能
- 层次化的系统
- 所需代码 - Javascript （可选）

###REST 标准
- 资源是由URI来指定。
- 对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。
- 通过操作资源的表现形式来操作资源。
- 资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式。

###REST 状态
应该注意区别应用的状态和连接协议的状态。HTTP连接是无状态的（也就是不记录每个连接的信息），而REST传输会包含应用的所有状态信息，因此可以大幅降低对HTTP连接的重复请求资源消耗。

###应用于WEB服务
> 符合 REST 设计风格的 Web API 称为 RESTful API。它从以下三个方面资源进行定义：
    
- 直观简短的资源地址：URI，比如：http://example.com/resources/。
- 传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON，XML ，YAML 等。
- 对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。

###REST 优点
- 可更高效利用缓存来提高响应速度
- 通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性
- 浏览器即可作为客户端，简化软件需求
- 相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小
- 不需要额外的资源发现机制
- 在软件技术演进中的长期的兼容性更好